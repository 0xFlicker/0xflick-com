/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  OffchainResolver,
  OffchainResolverInterface,
} from "../../../contracts/OffchainResolver.sol/OffchainResolver";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "_url",
        type: "string",
      },
      {
        internalType: "address[]",
        name: "_signers",
        type: "address[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "string[]",
        name: "urls",
        type: "string[]",
      },
      {
        internalType: "bytes",
        name: "callData",
        type: "bytes",
      },
      {
        internalType: "bytes4",
        name: "callbackFunction",
        type: "bytes4",
      },
      {
        internalType: "bytes",
        name: "extraData",
        type: "bytes",
      },
    ],
    name: "OffchainLookup",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address[]",
        name: "signers",
        type: "address[]",
      },
    ],
    name: "NewSigners",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        internalType: "uint64",
        name: "expires",
        type: "uint64",
      },
      {
        internalType: "bytes",
        name: "request",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "result",
        type: "bytes",
      },
    ],
    name: "makeSignatureHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "name",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "resolve",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "response",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "extraData",
        type: "bytes",
      },
    ],
    name: "resolveWithProof",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "signers",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceID",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "url",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620011cc380380620011cc833981016040819052620000349162000288565b815162000049906000906020850190620000fa565b5060005b8151811015620000b85760018060008484815181106200007157620000716200036d565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905580620000af8162000383565b9150506200004d565b507fab0b9cc3a46b568cb08d985497cde8ab7e18892d01f58db7dc7f0d2af859b2d781604051620000ea9190620003ad565b60405180910390a1505062000439565b8280546200010890620003fc565b90600052602060002090601f0160209004810192826200012c576000855562000177565b82601f106200014757805160ff191683800117855562000177565b8280016001018555821562000177579182015b82811115620001775782518255916020019190600101906200015a565b506200018592915062000189565b5090565b5b808211156200018557600081556001016200018a565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715620001e157620001e1620001a0565b604052919050565b600082601f830112620001fb57600080fd5b815160206001600160401b03821115620002195762000219620001a0565b8160051b6200022a828201620001b6565b92835284810182019282810190878511156200024557600080fd5b83870192505b848310156200027d5782516001600160a01b03811681146200026d5760008081fd5b825291830191908301906200024b565b979650505050505050565b600080604083850312156200029c57600080fd5b82516001600160401b0380821115620002b457600080fd5b818501915085601f830112620002c957600080fd5b815181811115620002de57620002de620001a0565b6020620002f4601f8301601f19168201620001b6565b82815288828487010111156200030957600080fd5b60005b83811015620003295785810183015182820184015282016200030c565b838111156200033b5760008385840101525b5090870151909550925050808211156200035457600080fd5b506200036385828601620001e9565b9150509250929050565b634e487b7160e01b600052603260045260246000fd5b6000600019821415620003a657634e487b7160e01b600052601160045260246000fd5b5060010190565b6020808252825182820181905260009190848201906040850190845b81811015620003f05783516001600160a01b031683529284019291840191600101620003c9565b50909695505050505050565b600181811c908216806200041157607f821691505b602082108114156200043357634e487b7160e01b600052602260045260246000fd5b50919050565b610d8380620004496000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806301ffc9a7146100675780631dcfea091461008f5780635600f04f146100b0578063736c0d5b146100c55780639061b923146100e8578063f4d4d2f8146100fb575b600080fd5b61007a610075366004610896565b61010e565b60405190151581526020015b60405180910390f35b6100a261009d36600461099c565b610145565b604051908152602001610086565b6100b861015c565b6040516100869190610a6d565b61007a6100d3366004610a80565b60016020526000908152604090205460ff1681565b6100b86100f6366004610adc565b6101ea565b6100b8610109366004610adc565b61034a565b60006001600160e01b03198216639061b92360e01b148061013f57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000610153858585856103de565b95945050505050565b6000805461016990610b47565b80601f016020809104026020016040519081016040528092919081815260200182805461019590610b47565b80156101e25780601f106101b7576101008083540402835291602001916101e2565b820191906000526020600020905b8154815290600101906020018083116101c557829003601f168201915b505050505081565b60606000639061b92360e01b8686868660405160240161020d9493929190610bab565b60408051601f19818403018152918152602080830180516001600160e01b03166001600160e01b031995909516949094179093528051600180825281830190925291935060009282015b60608152602001906001900390816102575790505090506000805461027b90610b47565b80601f01602080910402602001604051908101604052809291908181526020018280546102a790610b47565b80156102f45780601f106102c9576101008083540402835291602001916102f4565b820191906000526020600020905b8154815290600101906020018083116102d757829003601f168201915b50505050508160008151811061030c5761030c610bdd565b6020908102919091010152604051630556f18360e41b815261034190309083908590631e9a9a5f60e31b908290600401610bf3565b60405180910390fd5b606060008061035b85858989610451565b6001600160a01b038216600090815260016020526040902054919350915060ff166103d45760405162461bcd60e51b815260206004820152602360248201527f5369676e617475726556657269666965723a20496e76616c696420736967617460448201526275726560e81b6064820152608401610341565b9695505050505050565b815160209283012081519183019190912060408051601960f81b8186015260609690961b6001600160601b031916602287015260c09490941b6001600160c01b0319166036860152603e850191909152605e8085019190915282518085039091018152607e909301909152815191012090565b6000606081808061046486880188610c9e565b92509250925060006104b86104b230858d8d8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508b92506103de915050565b83610530565b905042836001600160401b0316101561051f5760405162461bcd60e51b8152602060048201526024808201527f5369676e617475726556657269666965723a205369676e6174757265206578706044820152631a5c995960e21b6064820152608401610341565b945091925050505b94509492505050565b600080600061053f8585610554565b9150915061054c816105c4565b509392505050565b60008082516041141561058b5760208301516040840151606085015160001a61057f8782858561077d565b945094505050506105bd565b8251604014156105b557602083015160408401516105aa86838361085d565b9350935050506105bd565b506000905060025b9250929050565b60008160048111156105d8576105d8610d11565b14156105e15750565b60018160048111156105f5576105f5610d11565b141561063e5760405162461bcd60e51b815260206004820152601860248201527745434453413a20696e76616c6964207369676e617475726560401b6044820152606401610341565b600281600481111561065257610652610d11565b14156106a05760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610341565b60038160048111156106b4576106b4610d11565b141561070d5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610341565b600481600481111561072157610721610d11565b141561077a5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610341565b50565b6000806fa2a8918ca85bafe22016d0b997e4df60600160ff1b038311156107aa5750600090506003610527565b8460ff16601b141580156107c257508460ff16601c14155b156107d35750600090506004610527565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015610827573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661085057600060019250925050610527565b9660009650945050505050565b6000806001600160ff1b0383168161087a60ff86901c601b610d27565b90506108888782888561077d565b935093505050935093915050565b6000602082840312156108a857600080fd5b81356001600160e01b0319811681146108c057600080fd5b9392505050565b80356001600160a01b03811681146108de57600080fd5b919050565b80356001600160401b03811681146108de57600080fd5b634e487b7160e01b600052604160045260246000fd5b600082601f83011261092157600080fd5b81356001600160401b038082111561093b5761093b6108fa565b604051601f8301601f19908116603f01168101908282118183101715610963576109636108fa565b8160405283815286602085880101111561097c57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600080608085870312156109b257600080fd5b6109bb856108c7565b93506109c9602086016108e3565b925060408501356001600160401b03808211156109e557600080fd5b6109f188838901610910565b93506060870135915080821115610a0757600080fd5b50610a1487828801610910565b91505092959194509250565b6000815180845260005b81811015610a4657602081850181015186830182015201610a2a565b81811115610a58576000602083870101525b50601f01601f19169290920160200192915050565b6020815260006108c06020830184610a20565b600060208284031215610a9257600080fd5b6108c0826108c7565b60008083601f840112610aad57600080fd5b5081356001600160401b03811115610ac457600080fd5b6020830191508360208285010111156105bd57600080fd5b60008060008060408587031215610af257600080fd5b84356001600160401b0380821115610b0957600080fd5b610b1588838901610a9b565b90965094506020870135915080821115610b2e57600080fd5b50610b3b87828801610a9b565b95989497509550505050565b600181811c90821680610b5b57607f821691505b60208210811415610b7c57634e487b7160e01b600052602260045260246000fd5b50919050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b604081526000610bbf604083018688610b82565b8281036020840152610bd2818587610b82565b979650505050505050565b634e487b7160e01b600052603260045260246000fd5b600060a0820160018060a01b0388168352602060a08185015281885180845260c08601915060c08160051b8701019350828a0160005b82811015610c575760bf19888703018452610c45868351610a20565b95509284019290840190600101610c29565b50505050508281036040840152610c6e8187610a20565b6001600160e01b03198616606085015290508281036080840152610c928185610a20565b98975050505050505050565b600080600060608486031215610cb357600080fd5b83356001600160401b0380821115610cca57600080fd5b610cd687838801610910565b9450610ce4602087016108e3565b93506040860135915080821115610cfa57600080fd5b50610d0786828701610910565b9150509250925092565b634e487b7160e01b600052602160045260246000fd5b60008219821115610d4857634e487b7160e01b600052601160045260246000fd5b50019056fea2646970667358221220105f3f4895b37547598c21faed5b86207b93954f62fc257b3844286562a10f7464736f6c63430008090033";

type OffchainResolverConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: OffchainResolverConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class OffchainResolver__factory extends ContractFactory {
  constructor(...args: OffchainResolverConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _url: PromiseOrValue<string>,
    _signers: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<OffchainResolver> {
    return super.deploy(
      _url,
      _signers,
      overrides || {}
    ) as Promise<OffchainResolver>;
  }
  override getDeployTransaction(
    _url: PromiseOrValue<string>,
    _signers: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_url, _signers, overrides || {});
  }
  override attach(address: string): OffchainResolver {
    return super.attach(address) as OffchainResolver;
  }
  override connect(signer: Signer): OffchainResolver__factory {
    return super.connect(signer) as OffchainResolver__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OffchainResolverInterface {
    return new utils.Interface(_abi) as OffchainResolverInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): OffchainResolver {
    return new Contract(address, _abi, signerOrProvider) as OffchainResolver;
  }
}
